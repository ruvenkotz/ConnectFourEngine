import Board
import Engine1
import EngineVsEngine
import BoardFunctions
first_moves = [([(5, 5), (5, 4), (5, 6), (5, 1), (5, 3), (5, 2), (5, 0)], 1),
 ([(5, 6), (5, 1), (5, 2), (5, 0), (5, 4), (4, 5), (5, 3)], -1), ([(5, 4), (4, 6), (5, 0), (5, 2), (5, 1), (5, 3), (4, 5)], 1), ([(5, 0), (5, 1), (5, 2), (4, 6), (4, 5), (5, 3), (4, 4)], -1), ([(4, 6), (5, 1), (4, 0), (5, 2), (4, 4), (5, 3), (4, 5)], 1), ([(5, 2), (4, 0), (5, 1), (3, 6), (5, 3), (4, 5), (4, 4)], -1), ([(4, 0), (5, 1), (3, 6), (5, 3), (4, 5), (4, 2), (4, 4)], 1), ([(3, 0), (5, 1), (3, 6), (5, 3), (4, 5), (4, 4), (4, 2)], -1), ([(3, 6), (5, 1), (2, 0), (4, 5), (4, 2), (5, 3), (4, 4)], 1), ([(5, 1), (2, 0), (5, 3), (4, 5), (2, 6), (4, 2), (4, 4)], -1), ([(5, 3), (2, 0), (2, 6), (4, 1), (4, 2), (4, 5), (4, 4)], 1), ([(4, 1), (2, 0), (4, 2), (4, 3), (4, 5), (2, 6), (4, 4)], -1), ([(4, 2), (2, 0), (4, 3), (2, 6), (4, 5), (3, 1), (4, 4)], 1), ([(2, 0), (4, 3), (4, 5), (2, 6), (3, 1), (4, 4), (3, 2)], -1), ([(4, 3), (4, 5), (2, 6), (1, 0), (4, 4), (3, 1), (3, 2)], 1), ([(1, 0), (3, 1), (4, 4), (4, 5), (2, 6), (3, 2), (3, 3)], -1), ([(0, 0), (2, 6), (3, 3), (4, 5), (4, 4), (3, 2), (3, 1)], 1), ([(3, 1), (4, 4), (4, 5), (2, 6), (3, 2), (3, 3)], -1), ([(2, 1), (2, 6), (3, 2), (3, 3), (4, 4), (4, 5)], 1), ([(1, 1), (3, 2), (2, 6), (3, 3), (4, 4), (4, 5)], -1), ([(0, 1), (2, 6), (3, 3), (4, 4), (4, 5), (3, 2)], 1), ([(3, 2), (2, 6), (3, 3), (4, 4), (4, 5)], -1), ([(3, 3), (2, 2), (2, 6), (4, 4), (4, 5)], 1), ([(2, 2), (2, 6), (4, 4), (4, 5), (2, 3)], -1), ([(1, 2), (2, 6), (4, 4), (4, 5), (2, 3)], 1), ([(0, 2), (2, 6), (4, 4), (4, 5), (2, 3)], -1), ([(2, 6), (4, 4), (4, 5), (2, 3)], 1), ([(1, 6), (4, 4), (4, 5), (2, 3)], -1), ([(0, 6), (4, 4), (4, 5), (2, 3)], 1), ([(4, 4), (4, 5), (2, 3)], -1), ([(3, 4), (4, 5), (2, 3)], 1), ([(2, 4), (4, 5), (2, 3)], -1), ([(1, 4), (4, 5), (2, 3)], 1), ([(0, 4), (4, 5), (2, 3)], -1), ([(2, 3), (4, 5)], 1), ([(4, 5), (1, 3)], -1), ([(1, 3), (3, 5)], 1), ([(3, 5), (0, 3)], -1), ([(0, 3), (2, 5)], 1), ([(2, 5)], -1), ([(1, 5)], 1)]

red_moves, yellow_moves = EngineVsEngine.get_policy(first_moves)

def choose_a_move(player, b, level, moves):
    """
    I use EngineVsEngine to get the optimal.
    :return:
    """


    legal_moves = BoardFunctions.legal_moves(b.get_board())

    for i in range(0, len(moves[level])):
        if legal_moves.count(moves[i]) > 0:
            return moves[i]
    return Engine1.choose_a_moove(player, b)




